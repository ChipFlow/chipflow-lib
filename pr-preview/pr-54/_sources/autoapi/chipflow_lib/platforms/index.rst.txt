chipflow_lib.platforms
======================

.. py:module:: chipflow_lib.platforms

.. autoapi-nested-parse::

   Platform definititions
   ----------------------

   This module defines the functionality you use in you code to target the ChipFlow platform



Classes
-------

.. autoapisummary::

   chipflow_lib.platforms.PinSignature


Package Contents
----------------

.. py:class:: PinSignature(direction, width = 1, all_have_oe = False, init=None)

   Bases: :py:obj:`amaranth.lib.wiring.Signature`


   Amaranth Signtaure used to decorate wires that would
   usually be brought out onto a port on the package.

   direction: Input, Output or Bidir
   width: width of port
   all_have_oe: For Bidir ports, should Output Enable be per wire or for the whole port
   init: a  :ref:`const-castable object <lang-constcasting>` for the initial values of the port


   .. py:property:: direction
      :type: amaranth.lib.io.Direction


      The direction of the IO port


   .. py:method:: width()

      The width of the IO port, in wires



   .. py:method:: options()

      Options set on the io port at construction

      Valid options are:
          "all_have_oe": For a bidirectional port, each wire can
          have it's direction dynamically controlled seperately,
          so each wire also has a corresponding Output Enable wire.
          "init": the initial value that this io port will have at power-up and reset.



   .. py:method:: annotations(*args)

      Annotate an interface object.

      Subclasses of :class:`Signature` may override this method to provide annotations for
      a corresponding interface object. The default implementation provides none.

      See :mod:`amaranth.lib.meta` for details.

      :returns: :py:`tuple()`
      :rtype: iterable of :class:`~.meta.Annotation`



